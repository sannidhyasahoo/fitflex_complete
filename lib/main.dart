import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';

// Providers
import 'providers/theme_provider.dart';
import 'providers/auth_provider.dart';
import 'providers/workout_provider.dart';
import 'providers/settings_provider.dart';

// Screens
import 'screens/splash_screen.dart';

// Firebase options (generated by `flutterfire configure`)
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // âœ… Always pass FirebaseOptions for Web
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  runApp(const FitFlexApp());
}

class FitFlexApp extends StatelessWidget {
  const FitFlexApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProvider(create: (_) => WorkoutProvider()),
        ChangeNotifierProvider(create: (_) => SettingsProvider()),
      ],
      // This Consumer is essential: it rebuilds MaterialApp when ThemeProvider notifies
      child: Consumer<ThemeProvider>(
        builder: (context, themeProvider, child) {
          return MaterialApp(
            title: 'FitFlex',
            debugShowCheckedModeBanner: false,
            // --- CRITICAL FIXES HERE ---
            theme: themeProvider
                .lightTheme, // Use the lightTheme getter from ThemeProvider
            darkTheme: themeProvider
                .darkTheme, // Use the darkTheme getter from ThemeProvider
            // --- END CRITICAL FIXES ---
            themeMode:
                themeProvider.themeMode, // This was already correctly dynamic
            home: const SplashScreen(),
          );
        },
      ),
    );
  }
}
